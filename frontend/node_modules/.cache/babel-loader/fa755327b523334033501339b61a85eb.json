{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n} // $FlowFixMe\n\n\nvar NumberUtils = /*#__PURE__*/function () {\n  function NumberUtils() {\n    _classCallCheck(this, NumberUtils);\n  }\n\n  _createClass(NumberUtils, null, [{\n    key: \"getParsedValue\",\n    value: function getParsedValue(value, valueType) {\n      return valueType === 'integer' ? parseInt(value, 10) : parseFloat(value);\n    }\n  }, {\n    key: \"getValueWithPrecisionAsString\",\n    value: function getValueWithPrecisionAsString(value, valueType, precision, valueStr) {\n      if (valueType === 'integer') {\n        return value.toString();\n      }\n\n      var factor = Math.pow(10, precision);\n      var decimalValueStr = (Math.round(value * factor) / factor).toString();\n      return valueStr && valueStr[valueStr.length - 1] === '.' ? \"\".concat(decimalValueStr, \".\") : decimalValueStr;\n    }\n  }]);\n\n  return NumberUtils;\n}();\n\nexports.default = NumberUtils;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA;;;IAGqBA,W;;;;;;;mCACGC,OAAeC,WAA8B;MACjE,OAAOA,SAAS,KAAK,SAAdA,GAA0BC,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAAlCC,GAAgDE,UAAU,CAACH,KAAD,CAAjE;IACD;;;kDAGCA,OACAC,WACAG,WACAC,UACQ;MACR,IAAIJ,SAAS,KAAK,SAAlB,EAA6B;QAC3B,OAAOD,KAAK,CAACM,QAANN,EAAP;MACD;;MAED,IAAMO,MAAM,YAAG,EAAH,EAASH,SAAT,CAAZ;MACA,IAAMI,eAAe,GAAG,CAACC,IAAI,CAACC,KAALD,CAAWT,KAAK,GAAGO,MAAnBE,IAA6BF,MAA9B,EAAsCD,QAAtC,EAAxB;MACA,OAAOD,QAAQ,IAAIA,QAAQ,CAACA,QAAQ,CAACM,MAATN,GAAkB,CAAnB,CAARA,KAAkC,GAA9CA,aAAuDG,eAAvD,SAA4EA,eAAnF;IACD","names":["NumberUtils","value","valueType","parseInt","parseFloat","precision","valueStr","toString","factor","decimalValueStr","Math","round","length"],"sources":["C:\\Users\\abdoe\\OneDrive\\Desktop\\new sheikh\\Software-Project\\frontend\\node_modules\\semantic-ui-react-numberinput\\src\\utils\\NumberUtils.js"],"sourcesContent":["// @flow\n\n// $FlowFixMe\nimport type { ValueType } from '../types/Types';\n\nexport default class NumberUtils {\n  static getParsedValue(value: string, valueType: ValueType): number {\n    return valueType === 'integer' ? parseInt(value, 10) : parseFloat(value);\n  }\n\n  static getValueWithPrecisionAsString(\n    value: number,\n    valueType: ValueType,\n    precision: number,\n    valueStr?: string\n  ): string {\n    if (valueType === 'integer') {\n      return value.toString();\n    }\n\n    const factor = 10 ** precision;\n    const decimalValueStr = (Math.round(value * factor) / factor).toString();\n    return valueStr && valueStr[valueStr.length - 1] === '.' ? `${decimalValueStr}.` : decimalValueStr;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}