{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Validators = _interopRequireDefault(require(\"./Validators\"));\n\nvar _NumberUtils = _interopRequireDefault(require(\"../utils/NumberUtils\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar PropValidators = /*#__PURE__*/function () {\n  function PropValidators() {\n    _classCallCheck(this, PropValidators);\n  }\n\n  _createClass(PropValidators, null, [{\n    key: \"validateValue\",\n    value: function validateValue(props) {\n      PropValidators.validateEmptyValue(props.allowEmptyValue, props.value);\n\n      if (props.allowEmptyValue && !props.value) {\n        return;\n      }\n\n      var value = _NumberUtils.default.getParsedValue(props.value, props.valueType);\n\n      if (!_Validators.default.isValidValue(value, props.valueType)) {\n        throw new Error('value must be a string that can be parsed to integer/decimal number depending on valueType');\n      }\n    }\n  }, {\n    key: \"validateEmptyValue\",\n    value: function validateEmptyValue(allowEmptyValue, value) {\n      if (!allowEmptyValue && !value) {\n        throw new Error('value is required');\n      }\n    }\n  }, {\n    key: \"validateDefaultValue\",\n    value: function validateDefaultValue(props) {\n      if (props.defaultValue !== undefined && !_Validators.default.isValidValue(props.defaultValue, props.valueType)) {\n        throw new Error('defaultValue must be integer/decimal number depending on valueType');\n      }\n    }\n  }, {\n    key: \"validateDoubleClickStepAmount\",\n    value: function validateDoubleClickStepAmount(props) {\n      if (!_Validators.default.isValidValue(props.doubleClickStepAmount, props.valueType)) {\n        throw new Error('doubleClickStepAmount must be integer/decimal number depending on valueType');\n      }\n\n      if (props.doubleClickStepAmount !== 0 && props.doubleClickStepAmount <= props.stepAmount) {\n        throw new Error('doubleClickStepAmount must be greater than stepAmount');\n      }\n    }\n  }, {\n    key: \"validateMinValue\",\n    value: function validateMinValue(props) {\n      if (props.minValue > props.maxValue) {\n        throw new Error('maxValue must greater than or equal to minValue');\n      }\n\n      PropValidators.validateMinOrMaxValue(props.valueType, props.minValue, 'minValue', props.maxLength);\n    }\n  }, {\n    key: \"validateMinOrMaxValue\",\n    value: function validateMinOrMaxValue(valueType, value, valueName, maxLength) {\n      if (!_Validators.default.isValidValue(value, valueType)) {\n        throw new Error(\"\".concat(valueName, \" must be integer/decimal number depending on valueType\"));\n      }\n\n      if (value.toString().length > maxLength) {\n        throw new Error(\"\".concat(valueName, \" does not fit in maxLength\"));\n      }\n    }\n  }, {\n    key: \"validateMaxLength\",\n    value: function validateMaxLength(props) {\n      _Validators.default.validatePositiveInteger(props.maxLength, 'maxLength');\n    }\n  }, {\n    key: \"validatePrecision\",\n    value: function validatePrecision(props) {\n      _Validators.default.validatePositiveInteger(props.precision, 'precision');\n    }\n  }, {\n    key: \"validateStepAmount\",\n    value: function validateStepAmount(props) {\n      if (!_Validators.default.isValidValue(props.stepAmount, props.valueType) || props.stepAmount <= 0) {\n        throw new Error('stepAmount must be a positive integer/decimal number depending on valueType');\n      }\n    }\n  }, {\n    key: \"validatePropsInDevelopmentMode\",\n    value: function validatePropsInDevelopmentMode(props) {\n      if (process.env.NODE_ENV === 'development') {\n        PropValidators.validateValue(props);\n        PropValidators.validateDefaultValue(props);\n        PropValidators.validateDoubleClickStepAmount(props);\n        PropValidators.validateMinValue(props);\n        PropValidators.validateMaxValue(props);\n        PropValidators.validateMaxLength(props);\n        PropValidators.validatePrecision(props);\n        PropValidators.validateStepAmount(props);\n      }\n    }\n  }]);\n\n  return PropValidators;\n}();\n\nexports.default = PropValidators;\n\n_defineProperty(PropValidators, \"validateMaxValue\", function (props) {\n  return PropValidators.validateMinOrMaxValue(props.valueType, props.maxValue, 'maxValue', props.maxLength);\n});","map":{"version":3,"mappings":"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","names":["PropValidators","props","validateEmptyValue","allowEmptyValue","value","NumberUtils","getParsedValue","valueType","Validators","isValidValue","Error","defaultValue","undefined","doubleClickStepAmount","stepAmount","minValue","maxValue","validateMinOrMaxValue","maxLength","valueName","toString","length","validatePositiveInteger","precision","process","env","NODE_ENV","validateValue","validateDefaultValue","validateDoubleClickStepAmount","validateMinValue","validateMaxValue","validateMaxLength","validatePrecision","validateStepAmount"],"sources":["C:\\Users\\abdoe\\OneDrive\\Desktop\\new sheikh\\Software-Project\\frontend\\node_modules\\semantic-ui-react-numberinput\\src\\validators\\PropValidators.js"],"sourcesContent":["// @flow\n\n// $FlowFixMe\nimport type { Props, ValueType } from '../types/Types';\n// $FlowFixMe\nimport Validators from './Validators';\n// $FlowFixMe\nimport NumberUtils from '../utils/NumberUtils';\n\nexport default class PropValidators {\n  static validateValue(props: Props) {\n    PropValidators.validateEmptyValue(props.allowEmptyValue, props.value);\n    if (props.allowEmptyValue && !props.value) {\n      return;\n    }\n    const value = NumberUtils.getParsedValue(props.value, props.valueType);\n    if (!Validators.isValidValue(value, props.valueType)) {\n      throw new Error(\n        'value must be a string that can be parsed to integer/decimal number depending on valueType'\n      );\n    }\n  }\n\n  static validateEmptyValue(allowEmptyValue: boolean, value: string) {\n    if (!allowEmptyValue && !value) {\n      throw new Error('value is required');\n    }\n  }\n\n  static validateDefaultValue(props: Props) {\n    if (props.defaultValue !== undefined && !Validators.isValidValue(props.defaultValue, props.valueType)) {\n      throw new Error('defaultValue must be integer/decimal number depending on valueType');\n    }\n  }\n\n  static validateDoubleClickStepAmount(props: Props) {\n    if (!Validators.isValidValue(props.doubleClickStepAmount, props.valueType)) {\n      throw new Error('doubleClickStepAmount must be integer/decimal number depending on valueType');\n    }\n    if (props.doubleClickStepAmount !== 0 && props.doubleClickStepAmount <= props.stepAmount) {\n      throw new Error('doubleClickStepAmount must be greater than stepAmount');\n    }\n  }\n\n  static validateMinValue(props: Props) {\n    if (props.minValue > props.maxValue) {\n      throw new Error('maxValue must greater than or equal to minValue');\n    }\n    PropValidators.validateMinOrMaxValue(props.valueType, props.minValue, 'minValue', props.maxLength);\n  }\n\n  static validateMaxValue = (props: Props) =>\n    PropValidators.validateMinOrMaxValue(props.valueType, props.maxValue, 'maxValue', props.maxLength);\n\n  static validateMinOrMaxValue(valueType: ValueType, value: number, valueName: string, maxLength: number) {\n    if (!Validators.isValidValue(value, valueType)) {\n      throw new Error(`${valueName} must be integer/decimal number depending on valueType`);\n    }\n    if (value.toString().length > maxLength) {\n      throw new Error(`${valueName} does not fit in maxLength`);\n    }\n  }\n\n  static validateMaxLength(props: Props) {\n    Validators.validatePositiveInteger(props.maxLength, 'maxLength');\n  }\n\n  static validatePrecision(props: Props) {\n    Validators.validatePositiveInteger(props.precision, 'precision');\n  }\n\n  static validateStepAmount(props: Props) {\n    if (!Validators.isValidValue(props.stepAmount, props.valueType) || props.stepAmount <= 0) {\n      throw new Error('stepAmount must be a positive integer/decimal number depending on valueType');\n    }\n  }\n\n  static validatePropsInDevelopmentMode(props: Props) {\n    if (process.env.NODE_ENV === 'development') {\n      PropValidators.validateValue(props);\n      PropValidators.validateDefaultValue(props);\n      PropValidators.validateDoubleClickStepAmount(props);\n      PropValidators.validateMinValue(props);\n      PropValidators.validateMaxValue(props);\n      PropValidators.validateMaxLength(props);\n      PropValidators.validatePrecision(props);\n      PropValidators.validateStepAmount(props);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}