{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Validators = _interopRequireDefault(require(\"../validators/Validators\"));\n\nvar _NumberUtils = _interopRequireDefault(require(\"./NumberUtils\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar ButtonUtils = /*#__PURE__*/function () {\n  function ButtonUtils() {\n    _classCallCheck(this, ButtonUtils);\n  }\n\n  _createClass(ButtonUtils, null, [{\n    key: \"isDisabledButton\",\n    value: function isDisabledButton(buttonType, _ref) {\n      var maxValue = _ref.maxValue,\n          minValue = _ref.minValue,\n          stepAmount = _ref.stepAmount,\n          value = _ref.value,\n          valueType = _ref.valueType;\n\n      var currentValue = _NumberUtils.default.getParsedValue(value, valueType);\n\n      var nextIncrementedValue = currentValue + stepAmount;\n      var nextDecrementedValue = currentValue - stepAmount;\n\n      if (buttonType === 'increment') {\n        return !_Validators.default.isValidValue(currentValue, valueType) || nextIncrementedValue > maxValue;\n      }\n\n      return !_Validators.default.isValidValue(currentValue, valueType) || nextDecrementedValue < minValue;\n    }\n  }, {\n    key: \"getButtonIconName\",\n    value: function getButtonIconName(buttonType, buttonPlacement) {\n      if (buttonPlacement === 'right') {\n        if (buttonType === 'increment') {\n          return 'caret up';\n        }\n\n        return 'caret down';\n      }\n\n      if (buttonType === 'increment') {\n        return 'plus';\n      }\n\n      return 'minus';\n    }\n  }]);\n\n  return ButtonUtils;\n}();\n\nexports.default = ButtonUtils;","map":{"version":3,"mappings":";;;;;;;AAKA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,W;;;;;;;qCAEjBC,Y,MAES;MAAA,IADPC,QACO,QADPA,QACO;MAAA,IADGC,QACH,QADGA,QACH;MAAA,IADaC,UACb,QADaA,UACb;MAAA,IADyBC,KACzB,QADyBA,KACzB;MAAA,IADgCC,SAChC,QADgCA,SAChC;;MACT,IAAMC,YAAY,GAAGC,qBAAYC,cAAZD,CAA2BH,KAA3BG,EAAkCF,SAAlCE,CAArB;;MACA,IAAME,oBAAoB,GAAGH,YAAY,GAAGH,UAA5C;MACA,IAAMO,oBAAoB,GAAGJ,YAAY,GAAGH,UAA5C;;MAEA,IAAIH,UAAU,KAAK,WAAnB,EAAgC;QAC9B,OAAO,CAACW,oBAAWC,YAAXD,CAAwBL,YAAxBK,EAAsCN,SAAtCM,CAAD,IAAqDF,oBAAoB,GAAGR,QAAnF;MACD;;MACD,OAAO,CAACU,oBAAWC,YAAXD,CAAwBL,YAAxBK,EAAsCN,SAAtCM,CAAD,IAAqDD,oBAAoB,GAAGR,QAAnF;IACD;;;sCAEwBF,YAAwBa,iBAA0C;MACzF,IAAIA,eAAe,KAAK,OAAxB,EAAiC;QAC/B,IAAIb,UAAU,KAAK,WAAnB,EAAgC;UAC9B,OAAO,UAAP;QACD;;QACD,OAAO,YAAP;MACD;;MAED,IAAIA,UAAU,KAAK,WAAnB,EAAgC;QAC9B,OAAO,MAAP;MACD;;MACD,OAAO,OAAP;IACD","names":["ButtonUtils","buttonType","maxValue","minValue","stepAmount","value","valueType","currentValue","NumberUtils","getParsedValue","nextIncrementedValue","nextDecrementedValue","Validators","isValidValue","buttonPlacement"],"sources":["C:\\Users\\abdoe\\OneDrive\\Desktop\\new sheikh\\Software-Project\\frontend\\node_modules\\semantic-ui-react-numberinput\\src\\utils\\ButtonUtils.js"],"sourcesContent":["// @flow\n\n// $FlowFixMe\nimport type { ButtonPlacement, ButtonType, Props } from '../types/Types';\n// $FlowFixMe\nimport Validators from '../validators/Validators';\n// $FlowFixMe\nimport NumberUtils from './NumberUtils';\n\nexport default class ButtonUtils {\n  static isDisabledButton(\n    buttonType: ButtonType,\n    { maxValue, minValue, stepAmount, value, valueType }: Props\n  ): boolean {\n    const currentValue = NumberUtils.getParsedValue(value, valueType);\n    const nextIncrementedValue = currentValue + stepAmount;\n    const nextDecrementedValue = currentValue - stepAmount;\n\n    if (buttonType === 'increment') {\n      return !Validators.isValidValue(currentValue, valueType) || nextIncrementedValue > maxValue;\n    }\n    return !Validators.isValidValue(currentValue, valueType) || nextDecrementedValue < minValue;\n  }\n\n  static getButtonIconName(buttonType: ButtonType, buttonPlacement: ButtonPlacement): string {\n    if (buttonPlacement === 'right') {\n      if (buttonType === 'increment') {\n        return 'caret up';\n      }\n      return 'caret down';\n    }\n\n    if (buttonType === 'increment') {\n      return 'plus';\n    }\n    return 'minus';\n  }\n}\n"]},"metadata":{},"sourceType":"script"}